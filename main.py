import logging
import asyncio
from datetime import datetime

import openai
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web, ClientSession
from bs4 import BeautifulSoup

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from config import (
    TELEGRAM_TOKEN,
    OPENAI_API_KEY,
    WEBHOOK_URL,
    LOG_BOT_TOKEN,
    LOG_CHAT_ID,
    WEBHOOK_PATH,
    PORT
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á –¥–ª—è OpenAI
openai.api_key = OPENAI_API_KEY

# -----------------------------------------------------------------------------
# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# -----------------------------------------------------------------------------
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# -----------------------------------------------------------------------------
# 2. –ü—Ä–∏–º–µ—Ä –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô (–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å DOCS_DB)
# -----------------------------------------------------------------------------
DOCS_DB = {
    "–ì–û–°–¢ 12.0.004-2015": {
        "title": "–ì–û–°–¢ 12.0.004-2015 –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä—É–¥–∞",
        "text": (
            "–≠—Ç–æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—É—á–µ–Ω–∏—é –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ "
            "–¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π... (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ)..."
        )
    },
    "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Ç—Ä—É–¥–∞ ‚Ññ59–Ω": {
        "title": "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ç—Ä—É–¥–∞ –∏ —Å–æ—Ü–∑–∞—â–∏—Ç—ã ‚Ññ59–Ω",
        "text": (
            "–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–∫–∞–∑–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –º–µ—Ç–æ–¥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ "
            "–ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞..."
        )
    },
    # –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

# -----------------------------------------------------------------------------
# 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------------------------------------------------------

async def send_log_to_telegram(user_info: str, user_message: str, bot_response: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç (LogBot).
    """
    from aiogram import Bot  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–ª—Å—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º bot
    log_message = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        f"üì• –ó–∞–ø—Ä–æ—Å:\n{user_message}\n\n"
        f"üì§ –û—Ç–≤–µ—Ç:\n{bot_response}"
    )
    log_bot = Bot(token=LOG_BOT_TOKEN)
    try:
        await log_bot.send_message(LOG_CHAT_ID, log_message)
        logger.info(f"–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {user_info}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")
    finally:
        await log_bot.session.close()


def find_in_local_docs(query: str):
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (doc_number, title, snippet) –∏–ª–∏ None.
    """
    query_lower = query.lower()
    for doc_number, doc_data in DOCS_DB.items():
        full_text_lower = doc_data["text"].lower()
        title_lower = doc_data["title"].lower()
        # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ query –≤—Ö–æ–¥–∏—Ç –≤ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤ title
        if query_lower in full_text_lower or query_lower in title_lower:
            snippet = doc_data["text"][:300] + "..."
            return (doc_number, doc_data["title"], snippet)
    return None


async def search_consultantplus(query: str, session: ClientSession):
    """
    –ü—Ä–∏–º–µ—Ä –ø—Ä—è–º–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ consultant.ru/search/?query=...
    –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–ª–∏ –Ω–∞—Ä—É—à–∞—Ç—å TOS.
    """
    base_url = "https://www.consultant.ru/search/"
    params = {"query": query}
    try:
        async with session.get(base_url, params=params) as resp:
            if resp.status != 200:
                logger.warning(f"ConsultantPlus –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                return None

            html = await resp.text()
            soup = BeautifulSoup(html, "html.parser")

            # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: <div class="search-card"> ...
            results = soup.find_all("div", class_="search-card")
            if not results:
                return None
            
            first_result = results[0]
            title_el = first_result.find("a", class_="search-card__link")
            excerpt_el = first_result.find("div", class_="search-card__anons")

            if not title_el or not excerpt_el:
                return None

            title = title_el.get_text(strip=True)
            link = title_el.get("href", "")
            excerpt = excerpt_el.get_text(strip=True)

            # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è, –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–æ–º–µ–Ω
            if link.startswith("/"):
                link = "https://www.consultant.ru" + link

            return {
                "title": title,
                "link": link,
                "excerpt": excerpt
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ consultantplus: {e}")
        return None


async def search_google_for_ot(query: str, session: ClientSession):
    """
    –£—Å–ª–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ Google (site:consultant.ru).
    –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Custom Search API
    –∏–ª–∏ –∏–Ω–æ–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ó–¥–µ—Å—å - –ø—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å).
    """
    google_url = "https://www.google.com/search"
    params = {
        "q": f"{query} site:consultant.ru",
        "hl": "ru"
    }
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
        )
    }
    try:
        async with session.get(google_url, params=params, headers=headers) as resp:
            if resp.status != 200:
                logger.warning(f"Google –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                return None

            html = await resp.text()
            soup = BeautifulSoup(html, "html.parser")
            divs = soup.select("div.tF2Cxc")
            if not divs:
                return None
            first = divs[0]
            link_tag = first.select_one("a")
            snippet_tag = first.select_one(".VwiC3b")
            if not link_tag or not snippet_tag:
                return None
            title = link_tag.get_text(strip=True)
            link = link_tag.get("href", "")
            excerpt = snippet_tag.get_text(strip=True)
            return {
                "title": title,
                "link": link,
                "excerpt": excerpt
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Google: {e}")
        return None

# -----------------------------------------------------------------------------
# 4. –•–µ–Ω–¥–ª–µ—Ä—ã
# -----------------------------------------------------------------------------

@router.message(CommandStart())
async def command_start(message: Message) -> None:
    """
    /start
    """
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞. "
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–∏—â—É –æ—Ç–≤–µ—Ç –≤ —Å–≤–æ–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ. "
        "–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—É, –æ–±—Ä–∞—â—É—Å—å –∫ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å. "
        "–í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞—é –Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫!"
    )
    await message.answer(welcome_text)
    user_info = (f"{message.from_user.full_name} (@{message.from_user.username})"
                 if message.from_user.username else message.from_user.full_name)
    await send_log_to_telegram(user_info, "/start", welcome_text)

@router.message(F.text)
async def handle_query(message: Message) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –∏—â–µ–º –≤ –±–∞–∑–µ -> –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏–¥—ë–º –Ω–∞ consultant.ru
    """
    user_text = message.text.strip()
    user_info = (f"{message.from_user.full_name} (@{message.from_user.username})"
                 if message.from_user.username else message.from_user.full_name)

    # 1) –ø–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    found_doc = find_in_local_docs(user_text)
    if found_doc:
        doc_num, doc_title, snippet = found_doc
        response_text = (
            f"–ù–∞—à—ë–ª –æ—Ç–≤–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ:\n\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_title} ({doc_num})\n\n"
            f"{snippet}"
        )
        await message.answer(response_text)
        await send_log_to_telegram(user_info, user_text, response_text)
        return

    # 2) –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ -> —Å–æ–æ–±—â–∞–µ–º –∏ –∏–¥—ë–º –Ω–∞ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å
    no_local_text = (
        "–í –º–æ–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
        "–Ω–∞ —Å–∞–π—Ç–µ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ü–ª—é—Å."
    )
    await message.answer(no_local_text)
    await send_log_to_telegram(user_info, user_text, no_local_text)

    # 2.1) —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:
    question_text = (
        "–ù—É–∂–Ω–∞ –ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞? "
        "–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞' –∏–ª–∏ '–Ω–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'."
    )
    await message.answer(question_text)


@router.message(F.text.lower().contains("–¥–∞, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"))
async def handle_judicial_yes(message: Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, –∏—â–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ consultantplus
    """
    user_text = message.text.strip()
    user_info = (f"{message.from_user.full_name} (@{message.from_user.username})"
                 if message.from_user.username else message.from_user.full_name)

    note_text = "–ò—â—É —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ –Ω–∞ consultant.ru ..."
    await message.answer(note_text)
    await send_log_to_telegram(user_info, user_text, note_text)

    try:
        async with ClientSession() as session:
            result = await search_consultantplus("—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞", session)

        if not result:
            not_found_text = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å consultant.ru "
                "(–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)."
            )
            await message.answer(not_found_text)
            await send_log_to_telegram(user_info, user_text, not_found_text)
            return

        response_text = (
            f"–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}\n"
            f"–°—Å—ã–ª–∫–∞: {result['link']}\n\n"
            f"{result['excerpt']}"
        )
        await message.answer(response_text)
        await send_log_to_telegram(user_info, user_text, response_text)

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏: {e}"
        await message.answer(error_message)
        logger.error(error_message)
        await send_log_to_telegram(user_info, user_text, error_message)


@router.message(F.text.lower().contains("–Ω–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"))
async def handle_judicial_no(message: Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º Google (site:consultant.ru)
    """
    user_text = message.text.strip()
    user_info = (f"{message.from_user.full_name} (@{message.from_user.username})"
                 if message.from_user.username else message.from_user.full_name)

    note_text = "–û–∫–µ–π, –±–µ–∑ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏. –ò—â—É –≤ ConsultantPlus —á–µ—Ä–µ–∑ Google..."
    await message.answer(note_text)
    await send_log_to_telegram(user_info, user_text, note_text)

    try:
        async with ClientSession() as session:
            # site:consultant.ru
            result = await search_google_for_ot("–æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞", session)

        if not result:
            not_found_text = (
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. "
                "–í–µ—Ä–æ—è—Ç–Ω–æ, Google –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç –∏–ª–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥."
            )
            await message.answer(not_found_text)
            await send_log_to_telegram(user_info, user_text, not_found_text)
            return

        response_text = (
            f"–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}\n"
            f"–°—Å—ã–ª–∫–∞: {result['link']}\n\n"
            f"{result['excerpt']}"
        )
        await message.answer(response_text)
        await send_log_to_telegram(user_info, user_text, response_text)

    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {e}"
        await message.answer(error_message)
        logger.error(error_message)
        await send_log_to_telegram(user_info, user_text, error_message)


# -----------------------------------------------------------------------------
# 5. –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (webhook, –∑–∞–ø—É—Å–∫)
# -----------------------------------------------------------------------------

async def on_startup(bot: Bot) -> None:
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
        await bot.set_webhook(webhook_url)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ —Å—Ç–∞—Ä—Ç–µ
        from aiogram import Bot
        log_bot = Bot(token=LOG_BOT_TOKEN)
        try:
            await log_bot.send_message(
                LOG_CHAT_ID,
                f"üöÄ –ë–æ—Ç –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ –∑–∞–ø—É—â–µ–Ω (—Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º)\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        finally:
            await log_bot.session.close()

async def on_shutdown(bot: Bot) -> None:
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    from aiogram import Bot
    log_bot = Bot(token=LOG_BOT_TOKEN)
    try:
        await log_bot.send_message(
            LOG_CHAT_ID,
            f"üî¥ –ë–æ—Ç –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    finally:
        await log_bot.session.close()

    await bot.session.close()

def main() -> None:
    from aiohttp import web
    from aiogram.webhook.aiohttp_server import SimpleRequestHandler

    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    app.router.add_get("/", lambda request: web.Response(text="OK"))

    app.on_startup.append(lambda app: on_startup(bot))
    app.on_shutdown.append(lambda app: on_shutdown(bot))

    port = int(PORT)
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
