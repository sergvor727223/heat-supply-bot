import logging
import asyncio
from datetime import datetime

import openai
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web, ClientSession
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from config import (
    TELEGRAM_TOKEN,
    OPENAI_API_KEY,
    WEBHOOK_URL,
    LOG_BOT_TOKEN,
    LOG_CHAT_ID,
    WEBHOOK_PATH,
    PORT
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
from system_prompt import SYSTEM_PROMPT

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á OpenAI
openai.api_key = OPENAI_API_KEY

# -----------------------------------------------------------------------------
# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# -----------------------------------------------------------------------------
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# -----------------------------------------------------------------------------
# 2. –¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (DOCS_DB)
# -----------------------------------------------------------------------------
DOCS_DB = {
    "–ì–û–°–¢ 12.0.004-2015": {
        "title": "–ì–û–°–¢ 12.0.004-2015 –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä—É–¥–∞",
        "text": (
            "–≠—Ç–æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—É—á–µ–Ω–∏—é –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. "
            "–ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω—ã –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤."
        )
    },
    "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Ç—Ä—É–¥–∞ ‚Ññ59–Ω": {
        "title": "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ç—Ä—É–¥–∞ –∏ —Å–æ—Ü–∑–∞—â–∏—Ç—ã ‚Ññ59–Ω",
        "text": (
            "–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–∫–∞–∑–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –º–µ—Ç–æ–¥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞. "
            "–û–ø–∏—Å–∞–Ω—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–µ–π –∏ –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤."
        )
    },
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

# -----------------------------------------------------------------------------
# 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------------------------------------------------------

async def send_log_to_telegram(user_info: str, user_message: str, bot_response: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ LogBot.
    """
    from aiogram import Bot  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    log_message = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        f"üì• –ó–∞–ø—Ä–æ—Å:\n{user_message}\n\n"
        f"üì§ –û—Ç–≤–µ—Ç:\n{bot_response}"
    )
    log_bot = Bot(token=LOG_BOT_TOKEN)
    try:
        await log_bot.send_message(LOG_CHAT_ID, log_message)
        logger.info(f"–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {user_info}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")
    finally:
        await log_bot.session.close()

def find_in_local_docs(query: str):
    """
    –ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Å–ª–æ–≤–∞—Ä—é DOCS_DB.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (doc_number, title, snippet), –∏–Ω–∞—á–µ None.
    """
    logger.info(f"–ò—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ: {query}")
    query_lower = query.lower()
    for doc_number, doc_data in DOCS_DB.items():
        full_text_lower = doc_data["text"].lower()
        title_lower = doc_data["title"].lower()
        if query_lower in full_text_lower or query_lower in title_lower:
            snippet = doc_data["text"][:300] + "..."
            logger.info(f"–ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ: {doc_number}")
            return (doc_number, doc_data["title"], snippet)
    logger.info("–í –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return None

async def search_consultantplus(query: str, session: ClientSession):
    """
    –ü–æ–∏—Å–∫ –Ω–∞ —Å–∞–π—Ç–µ consultant.ru –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
    """
    logger.info(f"–ò—â–µ–º –Ω–∞ consultant.ru: {query}")
    base_url = "https://www.consultant.ru/search/"
    params = {"query": query}
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        ),
        "Accept": "text/html,application/xhtml+xml,application/xml",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Referer": "https://www.consultant.ru/"
    }
    try:
        async with session.get(base_url, params=params, headers=headers, timeout=15) as resp:
            if resp.status != 200:
                logger.warning(f"ConsultantPlus –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                return None

            html = await resp.text()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ConsultantPlus, —Ä–∞–∑–º–µ—Ä HTML: {len(html)}")
            
            soup = BeautifulSoup(html, "html.parser")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
            selectors = ["div.search-card", "div.result", "div.content-selection__item"]
            
            for selector in selectors:
                results = soup.select(selector)
                if results:
                    first_result = results[0]
                    
                    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Å—ã–ª–∫—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                    title_el = first_result.find("a") or first_result.select_one("h3 a") or first_result.select_one(".title a")
                    excerpt_el = first_result.find("div", class_="text") or first_result.select_one("p") or first_result.select_one(".snippet")
                    
                    if title_el:
                        title = title_el.get_text(strip=True)
                        link = title_el.get("href", "")
                        excerpt = excerpt_el.get_text(strip=True) if excerpt_el else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        
                        if link.startswith("/"):
                            link = "https://www.consultant.ru" + link
                            
                        logger.info(f"–ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ ConsultantPlus: {title}")
                        return {"title": title, "link": link, "excerpt": excerpt}
            
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ConsultantPlus")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ consultant.ru: {e}")
        return None

async def search_google_for_ot(query: str, session: ClientSession):
    """
    –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ —Å–∞–π—Ç consultant.ru.
    """
    logger.info(f"–ò—â–µ–º —á–µ—Ä–µ–∑ Google: {query}")
    google_url = "https://www.google.com/search"
    params = {"q": f"{query} site:consultant.ru –æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞", "hl": "ru", "num": "5"}
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        ),
        "Accept": "text/html,application/xhtml+xml,application/xml",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Referer": "https://www.google.com/"
    }
    try:
        async with session.get(google_url, params=params, headers=headers, timeout=15) as resp:
            if resp.status != 200:
                logger.warning(f"Google –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                return None
                
            html = await resp.text()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Google, —Ä–∞–∑–º–µ—Ä HTML: {len(html)}")
            
            soup = BeautifulSoup(html, "html.parser")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, —Ç–∞–∫ –∫–∞–∫ Google –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            selectors = ["div.tF2Cxc", "div.g", "div.yuRUbf", "div.Gx5Zad"]
            
            for selector in selectors:
                divs = soup.select(selector)
                if divs:
                    for div in divs:
                        link_tag = div.select_one("a") or div.find("a")
                        title_tag = div.select_one("h3") or div.find("h3")
                        snippet_tag = div.select_one(".VwiC3b") or div.select_one(".st")
                        
                        if link_tag and (title_tag or link_tag.get_text(strip=True)):
                            title = title_tag.get_text(strip=True) if title_tag else link_tag.get_text(strip=True)
                            link = link_tag.get("href", "")
                            excerpt = snippet_tag.get_text(strip=True) if snippet_tag else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                            
                            # –û—á–∏—Å—Ç–∫–∞ URL –æ—Ç –º—É—Å–æ—Ä–∞
                            if "url=" in link:
                                link = link.split("url=")[1].split("&")[0]
                            
                            logger.info(f"–ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ Google: {title}")
                            return {"title": title, "link": link, "excerpt": excerpt}
                            
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ Google")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Google: {e}")
        return None

async def get_openai_answer(user_query: str) -> str:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç OpenAI ChatCompletion —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.
    """
    logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É OpenAI: {user_query[:50]}...")
    try:
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_query}
        ]
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=1000
        )
        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

# -----------------------------------------------------------------------------
# 4. –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
# -----------------------------------------------------------------------------
@router.message(CommandStart())
async def command_start(message: Message) -> None:
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏–Ω–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç "
        "–≤ —Å–≤–æ–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —è –≤—ã–ø–æ–ª–Ω—é –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂—É –∏—Å—Ç–æ—á–Ω–∏–∫. "
        "–Ø –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    )
    await message.answer(welcome_text)
    user_info = (f"{message.from_user.full_name} (@{message.from_user.username})"
                 if message.from_user.username else message.from_user.full_name)
    await send_log_to_telegram(user_info, "/start", welcome_text)

@router.message(F.text)
async def handle_query(message: Message) -> None:
    user_text = message.text.strip()
    user_info = (f"{message.from_user.full_name} (@{message.from_user.username})"
                 if message.from_user.username else message.from_user.full_name)

    # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    await message.answer("–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_info}: {user_text}")

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ "—Å—É–¥–µ–±" –∏ "–ø—Ä–∞–∫—Ç–∏–∫", –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ,
    # –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "—Å—É–¥–µ–±" in user_text.lower() and "–ø—Ä–∞–∫—Ç–∏–∫" in user_text.lower():
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ")
        try:
            async with ClientSession() as session:
                result = await search_google_for_ot(user_text, session)
            if result:
                answer = (
                    f"–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ:\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}\n"
                    f"–°—Å—ã–ª–∫–∞: {result['link']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['excerpt']}"
                )
            else:
                answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
            await message.answer(answer)
            await send_log_to_telegram(user_info, user_text, answer)
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–º—É –ø–æ–∏—Å–∫—É

    # 1) –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ (—Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å)
    found_doc = find_in_local_docs(user_text)
    if found_doc:
        doc_num, doc_title, snippet = found_doc
        answer = (
            f"–ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ:\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_title} ({doc_num})\n"
            f"–í—ã–¥–µ—Ä–∂–∫–∞: {snippet}"
        )
        await message.answer(answer)
        await send_log_to_telegram(user_info, user_text, answer)
        return

    # 2) –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—â–µ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    try:
        async with ClientSession() as session:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –Ω–∞ consultant.ru –Ω–∞–ø—Ä—è–º—É—é
            result = await search_consultantplus(user_text, session)
            
            # –ï—Å–ª–∏ –Ω–∞ consultant.ru –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º Google
            if not result:
                logger.info("–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –Ω–∞ consultant.ru –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º Google")
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
                result = await search_google_for_ot(user_text, session)
            
            if result:
                answer = (
                    f"–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}\n"
                    f"–°—Å—ã–ª–∫–∞: {result['link']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['excerpt']}"
                )
            else:
                # 3) –ï—Å–ª–∏ –Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ, –Ω–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI
                logger.info("–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ OpenAI")
                answer = await get_openai_answer(user_text)
                answer = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n{answer}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π –∏ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
    
    await message.answer(answer)
    await send_log_to_telegram(user_info, user_text, answer)

# -----------------------------------------------------------------------------
# 5. –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (webhook, –∑–∞–ø—É—Å–∫)
# -----------------------------------------------------------------------------
async def on_startup(bot: Bot) -> None:
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
        await bot.set_webhook(webhook_url)
        
        from aiogram import Bot
        log_bot = Bot(token=LOG_BOT_TOKEN)
        try:
            await log_bot.send_message(
                LOG_CHAT_ID,
                f"üöÄ –ë–æ—Ç –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ –∑–∞–ø—É—â–µ–Ω\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        finally:
            await log_bot.session.close()

async def on_shutdown(bot: Bot) -> None:
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    from aiogram import Bot
    log_bot = Bot(token=LOG_BOT_TOKEN)
    try:
        await log_bot.send_message(
            LOG_CHAT_ID,
            f"üî¥ –ë–æ—Ç –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    finally:
        await log_bot.session.close()
    await bot.session.close()

def main() -> None:
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    app.router.add_get("/", lambda request: web.Response(text="OK"))
    app.on_startup.append(lambda app: on_startup(bot))
    app.on_shutdown.append(lambda app: on_shutdown(bot))
    web.run_app(app, host="0.0.0.0", port=int(PORT))

if __name__ == "__main__":
    main()
