import logging
import asyncio
from datetime import datetime

import openai
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web, ClientSession
from bs4 import BeautifulSoup

from config import (
    TELEGRAM_TOKEN,
    OPENAI_API_KEY,
    WEBHOOK_URL,
    LOG_BOT_TOKEN,
    LOG_CHAT_ID,
    WEBHOOK_PATH,
    PORT
)

from system_prompt import SYSTEM_PROMPT

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

openai.api_key = OPENAI_API_KEY

bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# ----- –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–ê (–í –û–ü–ï–†–ê–¢–ò–í–ö–ï) -----
# user_context[user_id] = [
#    {"role": "assistant"/"user"/"system", "content": "..."},
#    ...
# ]
user_context = {}

# ----- –ü—Ä–∏–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã (—Ç–µ—Å—Ç) -----
DOCS_DB = {
    "–ì–û–°–¢ 12.0.004-2015": {
        "title": "–ì–û–°–¢ 12.0.004-2015 –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä—É–¥–∞",
        "text": (
            "–≠—Ç–æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—É—á–µ–Ω–∏—é –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ "
            "–¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω—ã –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤."
        )
    },
    "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Ç—Ä—É–¥–∞ ‚Ññ59–Ω": {
        "title": "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ç—Ä—É–¥–∞ –∏ —Å–æ—Ü–∑–∞—â–∏—Ç—ã ‚Ññ59–Ω",
        "text": (
            "–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–∫–∞–∑–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –º–µ—Ç–æ–¥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞. "
            "–û–ø–∏—Å–∞–Ω—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–µ–π –∏ –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤."
        )
    },
}

async def send_log_to_telegram(user_info: str, user_message: str, bot_response: str) -> None:
    from aiogram import Bot
    log_message = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        f"üì• –ó–∞–ø—Ä–æ—Å:\n{user_message}\n\n"
        f"üì§ –û—Ç–≤–µ—Ç:\n{bot_response}"
    )
    log_bot = Bot(token=LOG_BOT_TOKEN)
    try:
        await log_bot.send_message(LOG_CHAT_ID, log_message)
        logger.info(f"–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {user_info}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")
    finally:
        await log_bot.session.close()

def find_in_local_docs(query: str):
    query_lower = query.lower()
    for doc_number, doc_data in DOCS_DB.items():
        if (query_lower in doc_data["text"].lower()) or (query_lower in doc_data["title"].lower()):
            snippet = doc_data["text"][:300] + "..."
            return (doc_number, doc_data["title"], snippet)
    return None

async def search_google(query: str, session: ClientSession):
    google_url = "https://www.google.com/search"
    params = {"q": query, "hl": "ru", "num": "5"}
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        )
    }
    try:
        async with session.get(google_url, params=params, headers=headers, timeout=15) as resp:
            if resp.status != 200:
                logger.warning(f"Google –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                return None
            html = await resp.text()
            soup = BeautifulSoup(html, "html.parser")
            
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            divs = soup.select("div.tF2Cxc, div.g")
            if not divs:
                return None
            first = divs[0]
            link_tag = first.select_one("a")
            snippet_tag = first.select_one(".VwiC3b") or first.select_one(".st")
            if not link_tag:
                return None
            title = link_tag.get_text(strip=True)
            link = link_tag.get("href", "")
            excerpt = snippet_tag.get_text(strip=True) if snippet_tag else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            return {"title": title, "link": link, "excerpt": excerpt}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Google: {e}")
        return None

async def call_openai_chat(context_messages):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç OpenAI ChatCompletion —Å system_prompt + –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (context_messages).
    context_messages - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞:
      [{"role": "system", "content": SYSTEM_PROMPT}, {"role": "user", "content": ...}, ...]
    """
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=context_messages,
            max_tokens=1000
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

@router.message(CommandStart())
async def command_start(message: Message) -> None:
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏–Ω–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç "
        "–≤ —Å–≤–æ–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∏–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂—É –∏—Å—Ç–æ—á–Ω–∏–∫. "
        "–Ø –Ω–µ –≤—ã–¥—É–º—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç, —Å–æ–æ–±—â—É –≤–∞–º –æ–± —ç—Ç–æ–º."
    )
    await message.answer(welcome_text)

    user_id = message.from_user.id
    user_context[user_id] = [
        {"role": "system", "content": SYSTEM_PROMPT}
    ]  # –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å system_prompt

    user_info = f"{message.from_user.full_name} (@{message.from_user.username})" if message.from_user.username else message.from_user.full_name
    await send_log_to_telegram(user_info, "/start", welcome_text)

@router.message(F.text)
async def handle_query(message: Message) -> None:
    user_id = message.from_user.id
    user_text = message.text.strip()
    user_info = (f"{message.from_user.full_name} (@{message.from_user.username})"
                 if message.from_user.username else message.from_user.full_name)

    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç (–±–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è), —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ
    if user_id not in user_context:
        user_context[user_id] = [{"role": "system", "content": SYSTEM_PROMPT}]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    user_context[user_id].append({"role": "user", "content": user_text})

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ "—Å—É–¥–µ–±" + "–ø—Ä–∞–∫—Ç–∏–∫" –ª–∏ –∑–∞–ø—Ä–æ—Å
    if "—Å—É–¥–µ–±" in user_text.lower() and "–ø—Ä–∞–∫—Ç–∏–∫" in user_text.lower():
        # –ò—â–µ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (Google) –ø–æ —Å–∞–º–æ–π —Ñ—Ä–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with ClientSession() as session:
            result = await search_google(user_text, session)
        if result:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            answer_text = (
                f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}\n"
                f"–°—Å—ã–ª–∫–∞: {result['link']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['excerpt']}"
            )
            # –î–æ–±–∞–≤–∏–º —ç—Ç–æ –∫–∞–∫ assistant –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_context[user_id].append({"role": "assistant", "content": answer_text})
            await message.answer(answer_text)
            await send_log_to_telegram(user_info, user_text, answer_text)
            return
        else:
            # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ—Å–∏–º OpenAI –ø–æ–º–æ—á—å
            user_context[user_id].append({"role": "assistant", "content": "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –æ–±–æ–±—â–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."})
            final_answer = await call_openai_chat(user_context[user_id])
            user_context[user_id].append({"role": "assistant", "content": final_answer})
            await message.answer(final_answer)
            await send_log_to_telegram(user_info, user_text, final_answer)
            return

    # 2) –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    found_doc = find_in_local_docs(user_text)
    if found_doc:
        doc_num, doc_title, snippet = found_doc
        answer_text = (
            f"–ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ:\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_title} ({doc_num})\n"
            f"–í—ã–¥–µ—Ä–∂–∫–∞: {snippet}"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ assistant
        user_context[user_id].append({"role": "assistant", "content": answer_text})
        await message.answer(answer_text)
        await send_log_to_telegram(user_info, user_text, answer_text)
        return

    # 3) –ï—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ, –∏—â–µ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (Google)
    async with ClientSession() as session:
        result = await search_google(user_text, session)

    if result:
        answer_text = (
            f"–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}\n"
            f"–°—Å—ã–ª–∫–∞: {result['link']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['excerpt']}"
        )
        user_context[user_id].append({"role": "assistant", "content": answer_text})
        await message.answer(answer_text)
        await send_log_to_telegram(user_info, user_text, answer_text)
    else:
        # 4) –ï—Å–ª–∏ –¥–∞–∂–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å OpenAI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_context[user_id].append({"role": "assistant", "content": "–í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –°–µ–π—á–∞—Å —É—Ç–æ—á–Ω—é —É –ò–ò."})
        final_answer = await call_openai_chat(user_context[user_id])
        user_context[user_id].append({"role": "assistant", "content": final_answer})
        await message.answer(final_answer)
        await send_log_to_telegram(user_info, user_text, final_answer)

# -----------------------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ (webhook, etc.)
# -----------------------------------------------------------------------------
async def on_startup(bot: Bot) -> None:
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
        await bot.set_webhook(webhook_url)

        from aiogram import Bot
        log_bot = Bot(token=LOG_BOT_TOKEN)
        try:
            await log_bot.send_message(
                LOG_CHAT_ID,
                f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        finally:
            await log_bot.session.close()

async def on_shutdown(bot: Bot) -> None:
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    from aiogram import Bot
    log_bot = Bot(token=LOG_BOT_TOKEN)
    try:
        await log_bot.send_message(
            LOG_CHAT_ID,
            f"üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    finally:
        await log_bot.session.close()
    await bot.session.close()

def main() -> None:
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    app.router.add_get("/", lambda request: web.Response(text="OK"))
    app.on_startup.append(lambda app: on_startup(bot))
    app.on_shutdown.append(lambda app: on_shutdown(bot))
    web.run_app(app, host="0.0.0.0", port=int(PORT))

if __name__ == "__main__":
    main()
